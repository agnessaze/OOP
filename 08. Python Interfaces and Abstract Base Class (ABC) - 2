from abc import ABC, abstractmethod

class Employee(ABC):
    def __init__(self, name, id):
        self.name = name
        self.id = id

    @abstractmethod
    def calculate_pay(self):
        pass

class HourlyEmployee(Employee):
    def __init__(self, name, id, hourly_rate, hours_worked):
        super().__init__(name, id)
        self.hourly_rate = float(hourly_rate)
        self.hours_worked = float(hours_worked)

    def calculate_pay(self):
        return self.hourly_rate * self.hours_worked

    def __str__(self):
        return f"Employee {self.name} (ID: {self.id}) earns ${self.calculate_pay():.2f}"


class SalariedEmployee(Employee):
    def __init__(self, name, id, monthly_salary):
        super().__init__(name, id)
        self.monthly_salary = float(monthly_salary)

    def calculate_pay(self):
        return self.monthly_salary

    def __str__(self):
        return f"Employee {self.name} (ID: {self.id}) earns ${self.calculate_pay():.2f}"

class Freelancer(Employee):
    def __init__(self, name, id, project_payments):
        super().__init__(name, id)
        self.project_payments = [float(p) for p in project_payments]

    def calculate_pay(self):
        return sum(self.project_payments)

    def __str__(self):
        return f"Employee {self.name} (ID: {self.id}) earns ${self.calculate_pay():.2f}"

class LoggableMixin(ABC):
    def log(self):
        print(f"[LOG] {self}")

class LoggedHourlyEmployee(HourlyEmployee, LoggableMixin):
    pass

class LoggedSalariedEmployee(SalariedEmployee, LoggableMixin):
    pass

class LoggedFreelancer(Freelancer, LoggableMixin):
    pass

employees = [
    LoggedHourlyEmployee("Agnesa", 13354, 13.6, 168),
    LoggedSalariedEmployee("Hana", 12354, 3650),
    LoggedFreelancer("Sami", 46321, [53.6,54,61.8])
]

for employee in employees:
    employee.log()
